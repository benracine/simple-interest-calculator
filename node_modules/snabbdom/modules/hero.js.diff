diff --git a/modules/hero.js b/modules/hero.js
index b8b3159..e4cca55 100644
--- a/modules/hero.js
+++ b/modules/hero.js
@@ -1,58 +1,51 @@
+"use strict";
 var raf = (typeof window !== 'undefined' && window.requestAnimationFrame) || setTimeout;
-var nextFrame = function(fn) { raf(function() { raf(fn); }); };
-
+var nextFrame = function (fn) { raf(function () { raf(fn); }); };
 function setNextFrame(obj, prop, val) {
-  nextFrame(function() { obj[prop] = val; });
+  nextFrame(function () { obj[prop] = val; });
 }
-
 function getTextNodeRect(textNode) {
   var rect;
   if (document.createRange) {
     var range = document.createRange();
     range.selectNodeContents(textNode);
     if (range.getBoundingClientRect) {
-        rect = range.getBoundingClientRect();
+      rect = range.getBoundingClientRect();
     }
   }
   return rect;
 }
-
 function calcTransformOrigin(isTextNode, textRect, boundingRect) {
   if (isTextNode) {
     if (textRect) {
       //calculate pixels to center of text from left edge of bounding box
-      var relativeCenterX = textRect.left + textRect.width/2 - boundingRect.left;
-      var relativeCenterY = textRect.top + textRect.height/2 - boundingRect.top;
+      var relativeCenterX = textRect.left + textRect.width / 2 - boundingRect.left;
+      var relativeCenterY = textRect.top + textRect.height / 2 - boundingRect.top;
       return relativeCenterX + 'px ' + relativeCenterY + 'px';
     }
   }
   return '0 0'; //top left
 }
-
 function getTextDx(oldTextRect, newTextRect) {
   if (oldTextRect && newTextRect) {
-    return ((oldTextRect.left + oldTextRect.width/2) - (newTextRect.left + newTextRect.width/2));
+    return ((oldTextRect.left + oldTextRect.width / 2) - (newTextRect.left + newTextRect.width / 2));
   }
   return 0;
 }
 function getTextDy(oldTextRect, newTextRect) {
   if (oldTextRect && newTextRect) {
-    return ((oldTextRect.top + oldTextRect.height/2) - (newTextRect.top + newTextRect.height/2));
+    return ((oldTextRect.top + oldTextRect.height / 2) - (newTextRect.top + newTextRect.height / 2));
   }
   return 0;
 }
-
 function isTextElement(elm) {
   return elm.childNodes.length === 1 && elm.childNodes[0].nodeType === 3;
 }
-
 var removed, created;
-
-function pre(oldVnode, vnode) {
+function pre() {
   removed = {};
   created = [];
 }
-
 function create(oldVnode, vnode) {
   var hero = vnode.data.hero;
   if (hero && hero.id) {
@@ -60,7 +53,6 @@ function create(oldVnode, vnode) {
     created.push(vnode);
   }
 }
-
 function destroy(vnode) {
   var hero = vnode.data.hero;
   if (hero && hero.id) {
@@ -68,25 +60,21 @@ function destroy(vnode) {
     vnode.isTextNode = isTextElement(elm); //is this a text node?
     vnode.boundingRect = elm.getBoundingClientRect(); //save the bounding rectangle to a new property on the vnode
     vnode.textRect = vnode.isTextNode ? getTextNodeRect(elm.childNodes[0]) : null; //save bounding rect of inner text node
-    var computedStyle = window.getComputedStyle(elm, null); //get current styles (includes inherited properties)
+    var computedStyle = window.getComputedStyle(elm, void 0); //get current styles (includes inherited properties)
     vnode.savedStyle = JSON.parse(JSON.stringify(computedStyle)); //save a copy of computed style values
     removed[hero.id] = vnode;
   }
 }
-
 function post() {
-  var i, id, newElm, oldVnode, oldElm, hRatio, wRatio,
-      oldRect, newRect, dx, dy, origTransform, origTransition,
-      newStyle, oldStyle, newComputedStyle, isTextNode,
-      newTextRect, oldTextRect;
+  var i, id, newElm, oldVnode, oldElm, hRatio, wRatio, oldRect, newRect, dx, dy, origTransform, origTransition, newStyle, oldStyle, newComputedStyle, isTextNode, newTextRect, oldTextRect;
   for (i = 0; i < created.length; i += 2) {
     id = created[i];
-    newElm = created[i+1].elm;
+    newElm = created[i + 1].elm;
     oldVnode = removed[id];
     if (oldVnode) {
       isTextNode = oldVnode.isTextNode && isTextElement(newElm); //Are old & new both text?
       newStyle = newElm.style;
-      newComputedStyle = window.getComputedStyle(newElm, null); //get full computed style for new element
+      newComputedStyle = window.getComputedStyle(newElm, void 0); //get full computed style for new element
       oldElm = oldVnode.elm;
       oldStyle = oldElm.style;
       //Overall element bounding boxes
@@ -98,7 +86,8 @@ function post() {
         oldTextRect = oldVnode.textRect;
         dx = getTextDx(oldTextRect, newTextRect);
         dy = getTextDy(oldTextRect, newTextRect);
-      } else {
+      }
+      else {
         //Calculate distances between old & new positions
         dx = oldRect.left - newRect.left;
         dy = oldRect.top - newRect.top;
@@ -108,24 +97,24 @@ function post() {
       // Animate new element
       origTransform = newStyle.transform;
       origTransition = newStyle.transition;
-      if (newComputedStyle.display === 'inline') //inline elements cannot be transformed
-        newStyle.display = 'inline-block';        //this does not appear to have any negative side effects
+      if (newComputedStyle.display === 'inline')
+        newStyle.display = 'inline-block'; //this does not appear to have any negative side effects
       newStyle.transition = origTransition + 'transform 0s';
       newStyle.transformOrigin = calcTransformOrigin(isTextNode, newTextRect, newRect);
       newStyle.opacity = '0';
-      newStyle.transform = origTransform + 'translate('+dx+'px, '+dy+'px) ' +
-                               'scale('+1/wRatio+', '+1/hRatio+')';
+      newStyle.transform = origTransform + 'translate(' + dx + 'px, ' + dy + 'px) ' +
+        'scale(' + 1 / wRatio + ', ' + 1 / hRatio + ')';
       setNextFrame(newStyle, 'transition', origTransition);
       setNextFrame(newStyle, 'transform', origTransform);
       setNextFrame(newStyle, 'opacity', '1');
       // Animate old element
-      for (var key in oldVnode.savedStyle) { //re-apply saved inherited properties
+      for (var key in oldVnode.savedStyle) {
         if (parseInt(key) != key) {
-          var ms = key.substring(0,2) === 'ms';
-          var moz = key.substring(0,3) === 'moz';
-          var webkit = key.substring(0,6) === 'webkit';
-      	  if (!ms && !moz && !webkit) //ignore prefixed style properties
-        	  oldStyle[key] = oldVnode.savedStyle[key];
+          var ms = key.substring(0, 2) === 'ms';
+          var moz = key.substring(0, 3) === 'moz';
+          var webkit = key.substring(0, 6) === 'webkit';
+          if (!ms && !moz && !webkit)
+            oldStyle[key] = oldVnode.savedStyle[key];
         }
       }
       oldStyle.position = 'absolute';
@@ -133,14 +122,14 @@ function post() {
       oldStyle.left = oldRect.left + 'px';
       oldStyle.width = oldRect.width + 'px'; //Needed for elements who were sized relative to their parents
       oldStyle.height = oldRect.height + 'px'; //Needed for elements who were sized relative to their parents
-      oldStyle.margin = 0; //Margin on hero element leads to incorrect positioning
+      oldStyle.margin = '0'; //Margin on hero element leads to incorrect positioning
       oldStyle.transformOrigin = calcTransformOrigin(isTextNode, oldTextRect, oldRect);
       oldStyle.transform = '';
       oldStyle.opacity = '1';
       document.body.appendChild(oldElm);
-      setNextFrame(oldStyle, 'transform', 'translate('+ -dx +'px, '+ -dy +'px) scale('+wRatio+', '+hRatio+')'); //scale must be on far right for translate to be correct
+      setNextFrame(oldStyle, 'transform', 'translate(' + -dx + 'px, ' + -dy + 'px) scale(' + wRatio + ', ' + hRatio + ')'); //scale must be on far right for translate to be correct
       setNextFrame(oldStyle, 'opacity', '0');
-      oldElm.addEventListener('transitionend', function(ev) {
+      oldElm.addEventListener('transitionend', function (ev) {
         if (ev.propertyName === 'transform')
           document.body.removeChild(ev.target);
       });
@@ -148,5 +137,11 @@ function post() {
   }
   removed = created = undefined;
 }
-
-module.exports = {pre: pre, create: create, destroy: destroy, post: post};
+var heroModule = {
+  pre: pre,
+  create: create,
+  destroy: destroy,
+  post: post,
+};
+module.exports = heroModule;
+//# sourceMappingURL=hero.js.map
\ No newline at end of file
