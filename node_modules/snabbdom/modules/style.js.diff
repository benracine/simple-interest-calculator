diff --git a/modules/style.js b/modules/style.js
index e03b633..48cb700 100644
--- a/modules/style.js
+++ b/modules/style.js
@@ -1,20 +1,16 @@
+"use strict";
 var raf = (typeof window !== 'undefined' && window.requestAnimationFrame) || setTimeout;
-var nextFrame = function(fn) { raf(function() { raf(fn); }); };
-
+var nextFrame = function (fn) { raf(function () { raf(fn); }); };
 function setNextFrame(obj, prop, val) {
-  nextFrame(function() { obj[prop] = val; });
+  nextFrame(function () { obj[prop] = val; });
 }
-
 function updateStyle(oldVnode, vnode) {
-  var cur, name, elm = vnode.elm,
-      oldStyle = oldVnode.data.style,
-      style = vnode.data.style;
-
-  if (!oldStyle && !style) return;
+  var cur, name, elm = vnode.elm, oldStyle = oldVnode.data.style, style = vnode.data.style;
+  if (!oldStyle && !style)
+    return;
   oldStyle = oldStyle || {};
   style = style || {};
   var oldHasDel = 'delayed' in oldStyle;
-
   for (name in oldStyle) {
     if (!style[name]) {
       elm.style[name] = '';
@@ -29,28 +25,27 @@ function updateStyle(oldVnode, vnode) {
           setNextFrame(elm.style, name, cur);
         }
       }
-    } else if (name !== 'remove' && cur !== oldStyle[name]) {
+    }
+    else if (name !== 'remove' && cur !== oldStyle[name]) {
       elm.style[name] = cur;
     }
   }
 }
-
 function applyDestroyStyle(vnode) {
   var style, name, elm = vnode.elm, s = vnode.data.style;
-  if (!s || !(style = s.destroy)) return;
+  if (!s || !(style = s.destroy))
+    return;
   for (name in style) {
     elm.style[name] = style[name];
   }
 }
-
 function applyRemoveStyle(vnode, rm) {
   var s = vnode.data.style;
   if (!s || !s.remove) {
     rm();
     return;
   }
-  var name, elm = vnode.elm, idx, i = 0, maxDur = 0,
-      compStyle, style = s.remove, amount = 0, applied = [];
+  var name, elm = vnode.elm, i = 0, compStyle, style = s.remove, amount = 0, applied = [];
   for (name in style) {
     applied.push(name);
     elm.style[name] = style[name];
@@ -58,12 +53,21 @@ function applyRemoveStyle(vnode, rm) {
   compStyle = getComputedStyle(elm);
   var props = compStyle['transition-property'].split(', ');
   for (; i < props.length; ++i) {
-    if(applied.indexOf(props[i]) !== -1) amount++;
+    if (applied.indexOf(props[i]) !== -1)
+      amount++;
   }
-  elm.addEventListener('transitionend', function(ev) {
-    if (ev.target === elm) --amount;
-    if (amount === 0) rm();
+  elm.addEventListener('transitionend', function (ev) {
+    if (ev.target === elm)
+      --amount;
+    if (amount === 0)
+      rm();
   });
 }
-
-module.exports = {create: updateStyle, update: updateStyle, destroy: applyDestroyStyle, remove: applyRemoveStyle};
+var styleModule = {
+  create: updateStyle,
+  update: updateStyle,
+  destroy: applyDestroyStyle,
+  remove: applyRemoveStyle,
+};
+module.exports = styleModule;
+//# sourceMappingURL=style.js.map
\ No newline at end of file
