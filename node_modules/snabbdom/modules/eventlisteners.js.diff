diff --git a/modules/eventlisteners.js b/modules/eventlisteners.js
index 34ad98d..47d1e53 100644
--- a/modules/eventlisteners.js
+++ b/modules/eventlisteners.js
@@ -1,20 +1,24 @@
+"use strict";
 function invokeHandler(handler, vnode, event) {
   if (typeof handler === "function") {
     // call function handler
     handler.call(vnode, event, vnode);
-  } else if (typeof handler === "object") {
+  }
+  else if (typeof handler === "object") {
     // call handler with arguments
     if (typeof handler[0] === "function") {
       // special case for single argument for performance
       if (handler.length === 2) {
         handler[0].call(vnode, handler[1], event, vnode);
-      } else {
+      }
+      else {
         var args = handler.slice(1);
         args.push(event);
         args.push(vnode);
         handler[0].apply(vnode, args);
       }
-    } else {
+    }
+    else {
       // call multiple handlers
       for (var i = 0; i < handler.length; i++) {
         invokeHandler(handler[i]);
@@ -22,36 +26,24 @@ function invokeHandler(handler, vnode, event) {
     }
   }
 }
-
 function handleEvent(event, vnode) {
-  var name = event.type,
-      on = vnode.data.on;
-
+  var name = event.type, on = vnode.data.on;
   // call event handler(s) if exists
   if (on && on[name]) {
     invokeHandler(on[name], vnode, event);
   }
 }
-
 function createListener() {
   return function handler(event) {
     handleEvent(event, handler.vnode);
-  }
+  };
 }
-
 function updateEventListeners(oldVnode, vnode) {
-  var oldOn = oldVnode.data.on,
-      oldListener = oldVnode.listener,
-      oldElm = oldVnode.elm,
-      on = vnode && vnode.data.on,
-      elm = vnode && vnode.elm,
-      name;
-
+  var oldOn = oldVnode.data.on, oldListener = oldVnode.listener, oldElm = oldVnode.elm, on = vnode && vnode.data.on, elm = vnode && vnode.elm, name;
   // optimization for reused immutable handlers
   if (oldOn === on) {
     return;
   }
-
   // remove existing listeners which no longer used
   if (oldOn && oldListener) {
     // if element changed or deleted we remove all existing listeners unconditionally
@@ -60,7 +52,8 @@ function updateEventListeners(oldVnode, vnode) {
         // remove listener if element was changed or existing listeners removed
         oldElm.removeEventListener(name, oldListener, false);
       }
-    } else {
+    }
+    else {
       for (name in oldOn) {
         // remove listener if existing listener removed
         if (!on[name]) {
@@ -69,21 +62,20 @@ function updateEventListeners(oldVnode, vnode) {
       }
     }
   }
-
   // add new listeners which has not already attached
   if (on) {
     // reuse existing listener or create new
     var listener = vnode.listener = oldVnode.listener || createListener();
     // update vnode for listener
     listener.vnode = vnode;
-
     // if element changed or added we add all needed listeners unconditionally
     if (!oldOn) {
       for (name in on) {
         // add listener if element was changed or new listeners added
         elm.addEventListener(name, listener, false);
       }
-    } else {
+    }
+    else {
       for (name in on) {
         // add listener if new listener added
         if (!oldOn[name]) {
@@ -93,9 +85,10 @@ function updateEventListeners(oldVnode, vnode) {
     }
   }
 }
-
-module.exports = {
+var eventListenersModule = {
   create: updateEventListeners,
   update: updateEventListeners,
-  destroy: updateEventListeners
+  destroy: updateEventListeners,
 };
+module.exports = eventListenersModule;
+//# sourceMappingURL=eventlisteners.js.map
\ No newline at end of file
